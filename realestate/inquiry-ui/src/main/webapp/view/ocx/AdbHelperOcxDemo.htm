<!DOCTYPE html>
<html>
<head>
    <title>HidHelper ActiveX Demo</title>
    <meta http-equiv="X-UA-Compatible" content="IE=8">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <script language="javascript" type="text/javascript">
        var HidHelperUtils;
        var log;
        var isInit = false;

        function init() {
            if (!isInit) {

                isInit = true;
                HidHelperUtils = document.getElementById('myPad');
                log = document.getElementById('log');
                if (HidHelperUtils && log) {
                    HidHelperUtils.attachEvent("OnEvaluateCompleted", OnEvaluateCompleted);
                    HidHelperUtils.attachEvent("OnSignCompleted", OnSignCompleted);
                    HidHelperUtils.attachEvent("OnFaceValidateWithIdCardCompleted", OnFaceValidateWithIdCardCompleted);
                    HidHelperUtils.attachEvent("OnInteractionCompleted", OnInteractionCompleted);
                    HidHelperUtils.attachEvent("GetIdCardCompleted", GetIdCardCompleted);
                    HidHelperUtils.attachEvent("SignDeclarationCompleted", SignDeclarationCompleted);
                    return true;
                } else {
                    return false;
                }
            }
        }

        function Log(operation, value) {
            var message = "";
            switch (value) {
                case 0:
                    message = "成功";
                    break;
                case -1:
                    message = "信道错误,请重新开启服务";
                    break;
                case -2:
                    message = "设备执行失败";
                    break;
                case -3:
                    message = "设备响应报文长度错误";
                    break;
                case -4:
                    message = "软件卸载失败";
                    break;
                case -5:
                    message = "指令执行超时";
                    break;
                case -6:
                    message = "用户撤消";
                    break;
                case -60:
                    message = "http下载失败";
                    break;
                case -80:
                    message = "无需升级";
                    break;
                case -81:
                    message = "Apk验证失败";
                    break;
                case 1:
                    message = "内部错误";
                    break;
                case 2:
                    message = "设备不在线";
                    break;
                case 3:
                    message = "参数错误";
                    break;
                case 4:
                    message = "软件没有运行";
                    break;
                case 9:
                    message = "设备未授权";
                    break;
                case 10:
                    message = "文件不存在";
                    break;
                default:
                    message = value;
                    break
            }
            log.value = log.value + "\r\n" + operation + ":" + message;
        }

        function LogText(operation, message) {
            log.value = log.value + "\r\n" + operation + ":" + message;
        }

        function Start() {
            if (init()) {
                var result = HidHelperUtils.Start();
                Log("Start", result);
            }
        }

        function OneMeter() {
            var result = HidHelperUtils.OneMeter();
            Log("OneMeter", result);
        }

        function Welcome() {
            var result = HidHelperUtils.Welcome();
            Log("Welcome", result);
        }

        function Login() {
            var tbLoginName = document.getElementById("tbLoginName");
            var name = tbLoginName.value;
            if (name == "") {
                LogText("Login", "请输入姓名");
                return;
            }

            var tbLoginNo = document.getElementById("tbLoginNo");
            var no = tbLoginNo.value;
            if (no == "") {
                LogText("Login", "请输入工号");
                return;
            }

            var tbLoginPlaceName = document.getElementById("tbLoginPlaceName");
            var placename = tbLoginPlaceName.value;
            if (placename == "") {
                LogText("Login", "请输入机构名称");
                return;
            }

            var tbLoginPlaceNo = document.getElementById("tbLoginPlaceNo");
            var placeNo = tbLoginPlaceNo.value;
            if (placeNo == "") {
                LogText("Login", "请输入机构号");
                return;
            }

            var lbLoginLevel = document.getElementById("lbLoginLevel");
            var level = Number(lbLoginLevel.value);
            if (level < 0 || level > 5) {
                LogText("Login", "请输入正确的星级");
                return;
            }

            var tbLoginMotto = document.getElementById("tbLoginMotto");
            var motto = tbLoginMotto.value;

            var numLoginPicPlayTime = document.getElementById("numLoginPicPlayTime");
            var playtime = Number(numLoginPicPlayTime.value);
            if (playtime < 0 || playtime > 99) {
                LogText("Login", "请输入正确的播放时间");
                return;
            }

            var result = HidHelperUtils.Login(name, no, placename, placeNo, level, motto, playtime);
            Log("Login", result);
            Log("Login", "Login(\"" + name + "\", \"" + no + "\", \"" + placename + "\", \"" + placeNo + "\", " + level + ", \"" + motto + "\")");
        }


        function LoginWithPhoto() {
            var tbLoginName = document.getElementById("tbLoginName");
            var name = tbLoginName.value;
            if (name == "") {
                LogText("Login", "请输入姓名");
                return;
            }

            var tbLoginNo = document.getElementById("tbLoginNo");
            var no = tbLoginNo.value;
            if (no == "") {
                LogText("Login", "请输入工号");
                return;
            }

            var tbLoginPlaceName = document.getElementById("tbLoginPlaceName");
            var placename = tbLoginPlaceName.value;
            if (placename == "") {
                LogText("Login", "请输入机构名称");
                return;
            }

            var tbLoginPlaceNo = document.getElementById("tbLoginPlaceNo");
            var placeNo = tbLoginPlaceNo.value;
            if (placeNo == "") {
                LogText("Login", "请输入机构号");
                return;
            }

            var lbLoginLevel = document.getElementById("lbLoginLevel");
            var level = Number(lbLoginLevel.value);
            if (level < 0 || level > 5) {
                LogText("Login", "请输入正确的星级");
                return;
            }

            var tbLoginMotto = document.getElementById("tbLoginMotto");
            var motto = tbLoginMotto.value;

            var numLoginPicPlayTime = document.getElementById("numLoginPicPlayTime");
            var playtime = Number(numLoginPicPlayTime.value);
            if (playtime < 0 || playtime > 99) {
                LogText("Login", "请输入正确的播放时间");
                return;
            }

            var tbUserLoginPhoto = document.getElementById("tbUserLoginPhoto");
            var photoData = tbUserLoginPhoto.value;
            if (photoData == "") {
                LogText("LoginWithPhoto", "请输入Base64照片数据");
            }

            var result = HidHelperUtils.LoginWithPhoto(name, no, placename, placeNo, level, motto, playtime, photoData);
            Log("LoginWithPhoto", result);
            Log("LoginWithPhoto", "LoginWithPhoto(\"" + name + "\", \"" + no + "\", \"" + placename + "\", \"" + placeNo + "\", " + level + ", \"" + motto + "\"," + playtime + "\"," + photoData + "\"" + ")");
        }

        function Logout() {
            var result = HidHelperUtils.Logout();
            Log("Logout", result);
        }

        function StopService() {
            var result = HidHelperUtils.StopService();
            Log("StopService", result);
        }

        function RestoreService() {
            var result = HidHelperUtils.RestoreService();
            Log("RestoreService", result);
        }

        function Evaluate() {
            var lbEvaluateButton = document.getElementById("lbEvaluateButton");
            var key = lbEvaluateButton.value;
            var key = "3";

            var numEvaluateTimeout = document.getElementById("numEvaluateTimeout");
            var timeout = Number(numEvaluateTimeout.value);

            var result = HidHelperUtils.Evaluate(key, timeout);
            Log("Evaluate", result);
            var evaluateValue = HidHelperUtils.GetEvaluateValue();
            OnEvaluateCompleted(result, evaluateValue);
        }

        function EvaluateAsync() {
            var lbEvaluateButton = document.getElementById("lbEvaluateButton");
            var key = lbEvaluateButton.value;

            var numEvaluateTimeout = document.getElementById("numEvaluateTimeout");
            var timeout = Number(numEvaluateTimeout.value);

            var tbRunningNumberEvaluateAsync = document.getElementById("tbRunningNumberEvaluateAsync");
            var runningNumber = tbRunningNumberEvaluateAsync.value;

            var result = HidHelperUtils.EvaluateAsync(key, timeout, runningNumber);
            Log("EvaluateAsync", result);
        }

        function GetEvaluateAsyncResult() {
            var evaluateValue = HidHelperUtils.GetEvaluateValue();
            var evaluateValueRunningNumber = HidHelperUtils.GetEvaluateValueRunningNumber();
            OnEvaluateCompleted(0, evaluateValue);
            LogText("流水号|评价值", evaluateValueRunningNumber);
        }

        function CancelEvaluate() {
            var result = HidHelperUtils.CancelEvaluate();
            Log("CancelEvaluate", result);
        }

        function OnEvaluateCompleted(status, evaluateValue, runningNumber) {
            Log("OnEvaluateCompleted", status);
            LogText("OnEvaluateCompleted", " 评价结果：" + evaluateValue);
            LogText("OnEvaluateCompleted", " 流水号：" + runningNumber);
        }

        function PushMedia() {
            var pathTextBox = document.getElementById("tbPushMediaPath");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var result = HidHelperUtils.PushMedia(path);
                Log("PushMedia", result);
            } else {
                LogText("PushMedia", "请输入路径");
            }
        }

        function PushMediaRename() {
            var pathTextBox = document.getElementById("tbPushMediaPath");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var result = HidHelperUtils.PushMediaRename(path);
                Log("PushMediaRename", result);
            } else {
                LogText("PushMediaRename", "请输入路径");
            }
        }

        function PushUserImage() {
            var pathTextBox = document.getElementById("tbPushUserImage");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var result = HidHelperUtils.PushUserImage(path);
                Log("PushUserImage", result);
            } else {
                LogText("PushUserImage", "请输入路径");
            }
        }

        function PushSound() {
            var pathTextBox = document.getElementById("tbPushSound");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var result = HidHelperUtils.PushSound(path);
                Log("PushSound", result);
            } else {
                LogText("PushSound", "请输入路径");
            }
        }

        function UpdateAPK() {
            var pathTextBox = document.getElementById("tbUpdateAPK");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var result = HidHelperUtils.UpdateAPK(path);
                Log("UpdateAPK", result);
            } else {
                LogText("UpdateAPK", "请输入APK路径");
            }
        }

        function Install() {
            var pathTextBox = document.getElementById("tbInstall");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var result = HidHelperUtils.Install(path);

                Log("Install", result);
            } else {
                LogText("Install", "请输入APK路径");
            }
        }

        function UnInstall() {
            var result = HidHelperUtils.UnInstall();
            Log("UnInstall", result);
        }

        function Reboot() {
            var result = HidHelperUtils.Reboot();
            Log("Reboot", result);
        }

        function IsDeviceOnLine() {
            var result = HidHelperUtils.IsDeviceOnLine();
            Log("IsDeviceOnLine", result);
        }

        function PlaySound() {
            var pathTextBox = document.getElementById("tbPlaySound");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var result = HidHelperUtils.PlaySound(path);
                Log("PlaySound", result);
            } else {
                LogText("PlaySound", "请输入文件名");
            }
        }

        function MargueeNotice() {
            var noticeTextBox = document.getElementById("tbMargueeNotice");
            if (noticeTextBox) {
                var noticeText = noticeTextBox.value;
                var result = HidHelperUtils.MargueeNotice(noticeText);
                Log("MargueeNotice", result);
            } else {
                LogText("MargueeNotice", "输入控件不存在");
            }
        }

        function PDFInteractive() {
            var pathTextBox = document.getElementById("tbPDFInteractive");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var numPDFInteractiveTimeout = document.getElementById("numPDFInteractiveTimeout");
                var timeout = Number(numPDFInteractiveTimeout.value);
                var result = HidHelperUtils.PDFInteractive(timeout, path);
                Log("PDFInteractive", result);
                var interactionResult = HidHelperUtils.GetInteractiveResult();
                OnInteractionCompleted(result, interactionResult);
            } else {
                LogText("PDFInteractive", "请输入路径");
            }
        }

        function PDFInteractiveAsync() {
            var pathTextBox = document.getElementById("tbPDFInteractive");
            if (pathTextBox && pathTextBox.value) {
                var path = pathTextBox.value;
                var numPDFInteractiveTimeout = document.getElementById("numPDFInteractiveTimeout");
                var timeout = Number(numPDFInteractiveTimeout.value);
                var tbRunningNumberPDFInteractiveAsync = document.getElementById("tbRunningNumberPDFInteractiveAsync");
                var runningNumber = tbRunningNumberPDFInteractiveAsync.value;
                var result = HidHelperUtils.PDFInteractiveAsync(timeout, path, runningNumber);
                Log("PDFInteractiveAsync", result);
            } else {
                LogText("PDFInteractiveAsync", "请输入路径");
            }
        }

        function GetPDFInteractiveAsyncResult() {
            var interactionResult = HidHelperUtils.GetInteractiveResult();
            LogText("GetInteractiveResult", " 按钮值" + interactionResult);
            var interactionResultRunningNumber = HidHelperUtils.GetInteractiveResultRunningNumber();
            LogText("流水号|按钮值", interactionResultRunningNumber);
        }

        function OnInteractionCompleted(status, interactionResult, runningNumber) {
            Log("OnInteractionCompleted", status);
            LogText("OnInteractionCompleted", " 按钮值：" + interactionResult);
            LogText("OnInteractionCompleted", " 流水号：" + runningNumber);
        }

        function Interactive() {
            var htmlTextBox = document.getElementById("tbInteractive");
            if (htmlTextBox && htmlTextBox.value) {
                var html = htmlTextBox.value;
                var numInteractiveTimeout = document.getElementById("numInteractiveTimeout");
                var cbIsUrl = document.getElementById("cbIsUrl");

                var timeout = Number(numInteractiveTimeout.value);
                var isUrl = cbIsUrl.checked ? 1 : 0;
                var result = HidHelperUtils.Interactive(timeout, html, isUrl);
                Log("Interactive", result);
                var interactionResult = HidHelperUtils.GetInteractiveResult();
                OnInteractionCompleted(result, interactionResult);
            } else {
                LogText("Interactive", "请输入路径");
            }
        }

        function InteractiveAsync() {
            var htmlTextBox = document.getElementById("tbInteractive");
            if (htmlTextBox && htmlTextBox.value) {
                var html = htmlTextBox.value;
                var numInteractiveTimeout = document.getElementById("numInteractiveTimeout");
                var cbIsUrl = document.getElementById("cbIsUrl");

                var timeout = Number(numInteractiveTimeout.value);
                var isUrl = cbIsUrl.checked ? 1 : 0;
                var tbRunningNumberInteractiveAsync = document.getElementById("tbRunningNumberInteractiveAsync");
                var runningNumber = tbRunningNumberInteractiveAsync.value;
                var result = HidHelperUtils.InteractiveAsync(timeout, html, isUrl, runningNumber);
                Log("InteractiveAsync", result);
                var interactionResult = HidHelperUtils.GetInteractiveResult();
            } else {
                LogText("InteractiveAsync", "请输入html");
            }
        }

        function GetInteractiveAsyncResult() {
            var interactionResult = HidHelperUtils.GetInteractiveResult();
            LogText("GetInteractiveResult", " 按钮值" + interactionResult);
        }

        function Cancel() {
            var result = HidHelperUtils.Cancel();
            Log("Cancel", result);
        }

        function ShowInformation() {
            var htmlTextBox = document.getElementById("tbShowInformation");
            if (htmlTextBox && htmlTextBox.value) {
                var html = htmlTextBox.value;
                var numInteractiveTimeout = document.getElementById("numShowInformationTimeout");
                var cbIsUrl = document.getElementById("cbIsUrlShowInformation");

                var timeout = Number(numInteractiveTimeout.value);
                var isUrl = cbIsUrl.checked ? 1 : 0;
                var result = HidHelperUtils.ShowInformation(timeout, html, isUrl);
                Log("ShowInformation", result);
            } else {
                LogText("ShowInformation", "请输入内容");
            }
        }

        function ReturnToMain() {
            var result = HidHelperUtils.ReturnToMain();
            Log("ReturnToMain", result);
        }

        function InputVerifyCode() {
            var numInputVerifyCodeTimeout = document.getElementById("numInputVerifyCodeTimeout");
            var numInputVerifyCodeMin = document.getElementById("numInputVerifyCodeMin");
            var numInputVerifyCodeMax = document.getElementById("numInputVerifyCodeMax");

            var timeout = Number(numInputVerifyCodeTimeout.value);
            var minlen = Number(numInputVerifyCodeMin.value);
            var maxlen = Number(numInputVerifyCodeMax.value);

            var result = HidHelperUtils.InputVerifyCode(timeout, minlen, maxlen);
            Log("InputVerifyCode", result);
            var interactionResult = HidHelperUtils.GetInteractiveResult();
            var text = HidHelperUtils.GetInteractiveText();
            OnInputTextInteractionCompleted(interactionResult, text);
        }

        function InputVerifyCodeAsync() {
            var numInputVerifyCodeTimeout = document.getElementById("numInputVerifyCodeTimeout");
            var numInputVerifyCodeMin = document.getElementById("numInputVerifyCodeMin");
            var numInputVerifyCodeMax = document.getElementById("numInputVerifyCodeMax");

            var timeout = Number(numInputVerifyCodeTimeout.value);
            var minlen = Number(numInputVerifyCodeMin.value);
            var maxlen = Number(numInputVerifyCodeMax.value);

            var tbRunningNumberInputVerifyCodeAsync = document.getElementById("tbRunningNumberInputVerifyCodeAsync");
            var runningNumber = tbRunningNumberInputVerifyCodeAsync.value;

            var result = HidHelperUtils.InputVerifyCodeAsync(timeout, minlen, maxlen, runningNumber);
            Log("InputVerifyCodeAsync", result);
            //var interactionResult = HidHelperUtils.GetInteractiveResult();
            //var text = HidHelperUtils.GetInteractiveText();
            //OnInputTextInteractionCompleted(interactionResult, text);
        }

        function GetInputInteractiveAsyncResult() {
            var interactionResult = HidHelperUtils.GetInteractiveResult();
            LogText("GetInteractiveResult", " 按钮值" + interactionResult);
            var interactionResultRunningNumber = HidHelperUtils.GetInteractiveResultRunningNumber();
            LogText("流水号|按钮值", interactionResultRunningNumber);
            var text = HidHelperUtils.GetInteractiveText();
            LogText("输入内容", text);
        }


        function InputPassword() {
            var numInputPasswordTimeout = document.getElementById("numInputPasswordTimeout");
            var numInputPasswordMin = document.getElementById("numInputPasswordMin");
            var numInputPasswordMax = document.getElementById("numInputPasswordMax");

            var timeout = Number(numInputPasswordTimeout.value);
            var minlen = Number(numInputPasswordMin.value);
            var maxlen = Number(numInputPasswordMax.value);

            var result = HidHelperUtils.InputPassword(timeout, minlen, maxlen);
            Log("InputPassword", result);
            var interactionResult = HidHelperUtils.GetInteractiveResult();
            var text = HidHelperUtils.GetInteractiveText();
            OnInputTextInteractionCompleted(interactionResult, text);
        }

        function InputPasswordAsync() {
            var numInputPasswordTimeout = document.getElementById("numInputPasswordTimeout");
            var numInputPasswordMin = document.getElementById("numInputPasswordMin");
            var numInputPasswordMax = document.getElementById("numInputPasswordMax");

            var timeout = Number(numInputPasswordTimeout.value);
            var minlen = Number(numInputPasswordMin.value);
            var maxlen = Number(numInputPasswordMax.value);

            var tbRunningNumberInputPasswordAsync = document.getElementById("tbRunningNumberInputPasswordAsync");
            var runningNumber = tbRunningNumberInputPasswordAsync.value;

            var result = HidHelperUtils.InputPasswordAsync(timeout, minlen, maxlen, runningNumber);
            Log("InputPasswordAsync", result);
            //var interactionResult = HidHelperUtils.GetInteractiveResult();
            //var text = HidHelperUtils.GetInteractiveText();
            //OnInputTextInteractionCompleted(interactionResult, text);
        }

        function InputMobilePhone() {
            var numInputMobilePhoneTimeout = document.getElementById("numInputMobilePhoneTimeout");
            var timeout = Number(numInputMobilePhoneTimeout.value);

            var result = HidHelperUtils.InputMobilePhone(timeout);
            Log("InputMobilePhone", result);
            var interactionResult = HidHelperUtils.GetInteractiveResult();
            var text = HidHelperUtils.GetInteractiveText();
            OnInputTextInteractionCompleted(interactionResult, text);
        }

        function InputMobilePhoneAsync() {
            var numInputMobilePhoneTimeout = document.getElementById("numInputMobilePhoneTimeout");
            var timeout = Number(numInputMobilePhoneTimeout.value);


            var tbRunningNumberInputMobilePhoneAsync = document.getElementById("tbRunningNumberInputMobilePhoneAsync");
            var runningNumber = tbRunningNumberInputMobilePhoneAsync.value;

            var result = HidHelperUtils.InputMobilePhoneAsync(timeout, runningNumber);
            Log("InputMobilePhoneAsync", result);
            //var interactionResult = HidHelperUtils.GetInteractiveResult();
            //var text = HidHelperUtils.GetInteractiveText();
            //OnInputTextInteractionCompleted(interactionResult, text);
        }

        function OnInputTextInteractionCompleted(status, text) {
            LogText("OnInputTextInteractionCompleted", " 按钮值：" + status);
            LogText("OnInputTextInteractionCompleted", " 结果：" + text);
        }

        function GetDeviceInfo() {
            var result = HidHelperUtils.GetDeviceInfo("");
            Log("GetDeviceInfo", result);
        }

        function PushSingleUserImage() {
            var tbPushSingleUserImagePath = document.getElementById("tbPushSingleUserImagePath");
            var tbPushSingleUserImageNo = document.getElementById("tbPushSingleUserImageNo");
            if (tbPushSingleUserImagePath && tbPushSingleUserImagePath.value && tbPushSingleUserImageNo && tbPushSingleUserImageNo.value) {
                var path = tbPushSingleUserImagePath.value;
                var no = tbPushSingleUserImageNo.value;
                var result = HidHelperUtils.PushSingleUserImage(path, no);
                Log("PushSingleUserImage", result);
            } else {
                LogText("PushSingleUserImage", "请输入路径或工号");
            }
        }

        function ShowPdfSign() {
            var pathTextBox = document.getElementById("tbShowPdfSign");
            if (pathTextBox && pathTextBox.value) {
                var pdfData = pathTextBox.value;
                var numShowPdfSignTimeout = document.getElementById("numShowPdfSignTimeout");
                var timeout = Number(numShowPdfSignTimeout.value);
                var tbRunningNumberShowPdfSign = document.getElementById("tbRunningNumberShowPdfSign");
                var runningNumber = tbRunningNumberShowPdfSign.value;
                var result = HidHelperUtils.ShowPdfSignAsync(timeout, pdfData, 0, 0, 0, 0, 0, runningNumber);
            } else {
                LogText("ShowPdfSign", "请输入路径");
            }
        }

        function OnSignCompleted(result, confirmResult, signPicBase64, signData, runningnumber) {
            LogText("OnSignCompleted", " result：" + result);
            LogText("OnSignCompleted", " confirmResult：" + confirmResult);
            LogText("OnSignCompleted", " signPicBase64：" + signPicBase64);
            LogText("OnSignCompleted", " signData：" + signData);
            LogText("OnSignCompleted", " runningnumber：" + runningnumber);
        }

        function FaceValidateWithIdCardAsync() {
            var numFaceValidateWithIdCardTimeout = document.getElementById("numFaceValidateWithIdCardTimeout");
            var timeout = Number(numFaceValidateWithIdCardTimeout.value);
            var tbRunningNumberFaceValidateWithIdCard = document.getElementById("tbRunningNumberFaceValidateWithIdCard");
            var runningNumber = tbRunningNumberFaceValidateWithIdCard.value;
            var result = HidHelperUtils.FaceValidateWithIdCardAsync(timeout, runningNumber);
        }

        function OnFaceValidateWithIdCardCompleted(result, validate, score, photoBase64, jsonData, frontSideBase64, backSideBase64, runningNumber) {
            LogText("OnFaceValidateWithIdCardCompleted", " result：" + result);
            LogText("OnFaceValidateWithIdCardCompleted", " validate：" + validate);
            LogText("OnFaceValidateWithIdCardCompleted", " score：" + score);
            LogText("OnFaceValidateWithIdCardCompleted", " photoBase64：" + photoBase64);
            LogText("OnFaceValidateWithIdCardCompleted", " jsonData：" + jsonData);
            LogText("OnFaceValidateWithIdCardCompleted", " frontSideBase64：" + frontSideBase64);
            LogText("OnFaceValidateWithIdCardCompleted", " backSideBase64：" + backSideBase64);
            LogText("OnFaceValidateWithIdCardCompleted", " runningnumber：" + runningnumber);
        }

        function IdCardAsync() {
            var numIdCardTimeout = document.getElementById("numIdCardTimeout");
            var timeout = Number(numIdCardTimeout.value);
            var tbIdCardRunningNumber = document.getElementById("tbIdCardRunningNumber");
            var runningNumber = tbIdCardRunningNumber.value;
            var result = HidHelperUtils.GetIdCardAsync(timeout, runningNumber);
        }

        function GetIdCardCompleted(result, photoBase64, jsonData, frontSideBase64, backSideBase64, runningNumber) {
            LogText("GetIdCardCompleted", " result：" + result);
            LogText("GetIdCardCompleted", " phtotBase64：" + photoBase64);
            LogText("GetIdCardCompleted", " jsonInfo：" + jsonData);
            LogText("GetIdCardCompleted", " frontSideBase64：" + frontSideBase64);
            LogText("GetIdCardCompleted", " backSideBase64：" + backSideBase64);
            LogText("GetIdCardCompleted", " runningnumber：" + runningNumber);
        }

        function SignDeclarationAsync() {
            var numTimeoutSignDeclarationAsync = document.getElementById("numTimeoutSignDeclarationAsync");
            var timeout = Number(numTimeoutSignDeclarationAsync.value);
            var tbRunningNumberSignDeclarationAsync = document.getElementById("tbRunningNumberSignDeclarationAsync");
            var runningNumber = tbRunningNumberSignDeclarationAsync.value;
            var tbVoiceSignDeclarationAsyncn = document.getElementById("tbVoiceSignDeclarationAsyncn");
            var voice = tbVoiceSignDeclarationAsyncn.value;
            var tbTextSignDeclarationAsync = document.getElementById("tbTextSignDeclarationAsync");
            var text = tbTextSignDeclarationAsync.value;
            var result = HidHelperUtils.SignDeclarationAsync(voice, text, timeout, runningNumber);
        }

        function SignDeclarationCompleted(result, confirmResult, signPicBase64, signData, runningnumber) {
            LogText("SignDeclarationCompleted", " result：" + result);
            LogText("SignDeclarationCompleted", " confirmResult：" + confirmResult);
            LogText("SignDeclarationCompleted", " signPicBase64：" + signPicBase64);
            LogText("SignDeclarationCompleted", " signData：" + signData);
            LogText("SignDeclarationCompleted", " runningnumber：" + runningnumber);
        }

        function UpdateApkOnline() {
            var tbUpdateApkOnlineUrl = document.getElementById("tbUpdateApkOnlineUrl");
            var url = tbUpdateApkOnlineUrl.value;
            var tbUpdateApkOnlineMd5 = document.getElementById("tbUpdateApkOnlineMd5");
            var md5 = tbUpdateApkOnlineMd5.value;

            if (tbUpdateApkOnlineUrl && tbUpdateApkOnlineUrl.value) {
                var ret = HidHelperUtils.UpdateApkOnline(url, md5);
                Log("UpdateApkOnline", ret);
            } else {
                LogText("UpdateApkOnline", "请输入URL");
            }
        }

        function NeedUpdateApk() {
            var tbVersionCode = document.getElementById("tbVersionCode");
            if (tbVersionCode && tbVersionCode.value) {
                var versionCode = tbVersionCode.value;
                var ret = HidHelperUtils.NeedUpdateApk(versionCode);
                if (ret <= 0) {
                    LogText("NeedUpdateApk", "不需要升级");
                } else {
                    LogText("NeedUpdateApk", "需要升级");
                }
            } else {
                LogText("NeedUpdateApk", "请输入Version Code");
            }
        }

    </script>

</head>
<body>
<object id="myPad" style="left: 0px; width: 100px; top: 0px; height: 100px"
        classid="clsid:433E8BB0-CAB7-4490-B395-5D7A27BB6D6C"></object>
<br/>
<input id="btStart" type="button" value="开启服务" onclick="Start();"/>
<br/>
<br/>
<b>基础功能</b><br>
<input id="btOneMeter" type="button" value="一米线" onclick="OneMeter()"/>
<input id="btWelcome" type="button" value="欢迎光临" onclick="Welcome()"/>
<input id="btStopService" type="button" value="暂停服务" onclick="StopService()"/>
<input id="btRestoreService" type="button" value="恢复服务" onclick="RestoreService()"/>
<input id="btReboot" type="button" value="重启设备" onclick="Reboot()"/>
<input id="btIsDeviceOnLine" type="button" value="设备状态" onclick="IsDeviceOnLine()"/>
<hr/>
<b>员工登录</b><br>
姓名<input id="tbLoginName" type="text" maxlength="20" size="10"/>
工号<input id="tbLoginNo" type="text" maxlength="20" size="10"/>
机构名称<input id="tbLoginPlaceName" type="text" maxlength="20" size="10"/>
机构号<input id="tbLoginPlaceNo" type="text" maxlength="20" size="10"/>
星级
<select id="lbLoginLevel">
    <option value="1">1星</option>
    <option value="2">2星</option>
    <option value="3">3星</option>
    <option value="4">4星</option>
    <option value="5" selected>5星</option>
</select>
宣传语<input id="tbLoginMotto" type="text" maxlength="20" size="10"/>
图片播放时间<input id="numLoginPicPlayTime" type="number" value="10" size="10"/>

<input id="btLogin" type="button" value="Login" onclick="Login()"/>
<br/>
员工照片 Base64<textarea id="tbUserLoginPhoto" type="text"></textarea>
<input id="btLoginWithPhoto" type="button" value="LoginWithPhoto" onclick="LoginWithPhoto()"/>
<br/>
<input id="btLogout" type="button" value="退出登录" onclick="Logout()"/>
<hr/>
<b>评价</b><br>
超时时间<input id="numEvaluateTimeout" type="number" value="60"/>
评价按钮数量
<select id="lbEvaluateButton">
    <option value="3">3键</option>
    <option value="4" selected>4键</option>
    <option value="5">5键</option>
</select>
<input id="btEvaluate" type="button" value="评价" onclick="Evaluate()"/>
<input id="btCancelEvaluate" type="button" value="撤销评价" onclick="CancelEvaluate()"/>
流水号
<input id="tbRunningNumberEvaluateAsync" type="text" maxlength="128"/>
<input id="btEvaluateAsync" type="button" value="异步评价" onclick="EvaluateAsync()"/>
<hr/>
<b>广告推送</b><br>
文件/文件夹路径<input id="tbPushMediaPath" type="text"/>
<input id="btPushMedia" type="button" value="推送广告" onclick="PushMedia()"/>
<input id="btPushMedia" type="button" value="推送广告并改名" onclick="PushMediaRename()"/>
<hr/>
<b>员工照片推送</b><br>
文件/文件夹路径<input id="tbPushUserImage" type="text"/>
<input id="btPushUserImage" type="button" value="推送照片" onclick="PushUserImage()"/>
<hr/>
<b>语音推送</b><br>
文件/文件夹路径<input id="tbPushSound" type="text"/>
<input id="btPushSound" type="button" value="推送语音" onclick="PushSound()"/>
<hr/>
<b>电磁签名</b><br>
超时时间<input id="numShowPdfSignTimeout" type="number" value="60"/>
PDF Base64<textarea id="tbShowPdfSign" type="text"></textarea>流水号
<input id="tbRunningNumberShowPdfSign" type="text" maxlength="128"/>
<input id="btShowPdfSign" type="button" value="异步签名" onclick="ShowPdfSign()"/>
<input type="button" value="撤销" onclick="Cancel()"/>
<hr/>
<b>人证比对</b><br>
超时时间<input id="numFaceValidateWithIdCardTimeout" type="number" value="60"/>
流水号<input id="tbRunningNumberFaceValidateWithIdCard" type="text" maxlength="128"/>
<input id="btFaceValidateWithIdCardAsync" type="button" value="人证比对" onclick="FaceValidateWithIdCardAsync()"/>
<input type="button" value="撤销" onclick="Cancel()"/>
<hr/>
<b>显示交互</b><br>
超时时间<input id="numInteractiveTimeout" type="number" value="60"/>
HTML/URL<textarea id="tbInteractive" type="text"></textarea>
是否网址<input id="cbIsUrl" type="checkbox"/>
<input id="btInteractive" type="button" value="显示交互" onclick="Interactive()"/>
<input type="button" value="撤销" onclick="Cancel()"/>
流水号
<input id="tbRunningNumberInteractiveAsync" type="text" maxlength="128"/>
<input id="btInteractiveAsync" type="button" value="异步交互" onclick="InteractiveAsync()"/>
<input id="btInteractiveAsyncResult" type="button" value="取得异步交互结果" onclick="GetInteractiveAsyncResult()"/>
<hr/>
<b>显示信息</b><br>
超时时间<input id="numShowInformationTimeout" type="number" value="60"/>
HTML/URL<textarea id="tbShowInformation" type="text"></textarea>
是否网址<input id="cbIsUrlShowInformation" type="checkbox"/>
<input id="btShowInformation" type="button" value="显示信息" onclick="ShowInformation()"/>
<input type="button" value="返回主窗口" onclick="ReturnToMain()"/>
<hr/>
<b>二代身份证读取</b><br>
超时时间<input id="numIdCardTimeout" type="number" value="60"/>
流水号<input id="tbIdCardRunningNumber" type="text" maxlength="128"/>
<input id="btIdCardAsync" type="button" value="二代证异步读取" onclick="IdCardAsync()"/>
<input type="button" value="撤销" onclick="Cancel()"/>
<hr/>
<b>电磁签名2</b><br>
超时时间<input id="numTimeoutSignDeclarationAsync" type="number" value="60"/>
提示语音<input id="tbVoiceSignDeclarationAsyncn" type="text">
提示文字<input id="tbTextSignDeclarationAsync" type="text"></input>流水号
<input id="tbRunningNumberSignDeclarationAsync" type="text" maxlength="128"/>
<input id="btSignDeclarationAsync" type="button" value="异步签名" onclick="SignDeclarationAsync()"/>
<input type="button" value="撤销" onclick="Cancel()"/>
<hr/>
<b>APK升级</b><br>
APK version code<input id="tbVersionCode" type="text"/>
<input type="button" value="Check升级" onclick="NeedUpdateApk()"/>
APK URL<input id="tbUpdateApkOnlineUrl" type="text"/>
APK MD5<input id="tbUpdateApkOnlineMd5" type="text">
<input type="button" value="升级" onclick="UpdateApkOnline()"/>
<hr/>
<b>日志</b><br>
<textarea id="log" style="width:100%;" rows="16"></textarea>
</body>
</html>
